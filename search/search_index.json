{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#optialgo-dan-scikit-learn","title":"<code>optialgo</code> dan <code>scikit-learn</code>","text":"<p>Jika kamu sudah biasa membuat model dengan <code>scikit-learn</code>, selamat \ud83e\udd29 kamu akan mudah menggunakan optialgo !</p>"},{"location":"#fitur","title":"Fitur","text":"<pre><code>1. Data Prepration\n2. Data Preprocessing\n3. Text Preprocessing (2x Faster)\n3. Comparing Model\n4. Set Model\n5. Prediction\n6. HyperParameter Tuning\n</code></pre>"},{"location":"#instalasi","title":"Instalasi","text":"<p>Sebelum install OptiAlgo, disarankan membuat environment terlebih dahulu.</p> <p><pre><code>pip install optialgo\n</code></pre> atau</p> <pre><code>pip install git+https://github.com/nsandarma/OptiAlgo.git\n</code></pre> <p>dan untuk kebutuhan text preprocessing</p> <pre><code>&gt;&gt;&gt; import nltk\n&gt;&gt;&gt; nltk.download('all')\n</code></pre>"},{"location":"#overview","title":"Overview","text":"<pre><code>import pandas as pd\nfrom optialgo import Dataset, Classification\n\ndf = pd.read_csv('dataset_ex/drug200.csv')\nfeatures = ['Age','Sex','BP','Cholesterol',\"Na_to_K\"]\ntarget = 'Drug'\n\ndataset = Dataset(dataframe=df)\ndataset.fit(features=features,target=target)\n\nclf = Classification()\nresult = clf.compare_model(output='table',train_val=True)\nprint(result)\n</code></pre>"},{"location":"dataset/","title":"Dataset","text":""},{"location":"dataset/#optialgo.Dataset","title":"Dataset","text":"<pre><code>Dataset(\n    dataframe: DataFrame,\n    norm: bool = False,\n    test_size: float = 0.2,\n    seed: int = 42,\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>The input dataframe containing the data to be processed and used for model training.</p> </li> <li> <code>norm</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>A flag indicating whether to normalize the features. Default is False.</p> </li> <li> <code>test_size</code>               (<code>float</code>, default:                   <code>0.2</code> )           \u2013            <p>The proportion of the dataset to include in the test split. Default is 0.2 (20%).</p> </li> <li> <code>seed</code>               (<code>int</code>, default:                   <code>42</code> )           \u2013            <p>The random seed for reproducibility of the train-test split. Default is 42.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If there are missing values in the input dataframe, an error is raised with information on which columns contain missing values.</p> </li> </ul> <p>Examples: <pre><code>df = pd.read_csv(\"house_prices.csv\")\ndataset = Dataset(dataframe=df)\n</code></pre></p>"},{"location":"dataset/#optialgo.Dataset.fit","title":"fit","text":"<pre><code>fit(\n    features: list,\n    target: Optional[str],\n    t: Literal[\"classification\", \"regression\"],\n    encoder: dict = None,\n    ci=False,\n)\n</code></pre> <p>Prepares and fits the dataset for a machine learning task by performing necessary preprocessing steps.</p> <p>Parameters:</p> <ul> <li> <code>features</code>               (<code>list</code>)           \u2013            <p>A list of feature column names to be used for model training.</p> </li> <li> <code>target</code>               (<code>Optional[str]</code>)           \u2013            <p>The name of the target column.</p> </li> <li> <code>t</code>               (<code>Literal['classification', 'regression']</code>)           \u2013            <p>classification or regression</p> </li> <li> <code>encoder</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>A dictionary specifying custom encoders for specific columns. If None, default encoders are used.</p> </li> <li> <code>check_imbalance</code>           \u2013            <p>If True, checks for class imbalance in the target column for classification tasks. If an imbalance is detected, it triggers the imbalance handling procedure.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>t</code>           \u2013            <p>The type of machine learning task (<code>clustering</code>, <code>classification</code>, or <code>regression</code>).</p> </li> <li> <code>class_type</code>           \u2013            <p>The classification type (<code>binary</code> or <code>multiclass</code>) if the task is classification.</p> </li> <li> <code>train</code>           \u2013            <p>The preprocessed training dataset.</p> </li> <li> <code>test</code>           \u2013            <p>The preprocessed testing dataset.</p> </li> <li> <code>pipeline</code>           \u2013            <p>The preprocessing pipeline used for transforming the data.</p> </li> <li> <code>features</code>           \u2013            <p>The list of feature names after preprocessing.</p> </li> <li> <code>feature_names</code>           \u2013            <p>The original feature names before preprocessing.</p> </li> <li> <code>target</code>           \u2013            <p>The target column name.</p> </li> <li> <code>label_encoder</code>           \u2013            <p>The label encoder used for encoding the target column if it is categorical.</p> </li> </ul> Notes <p>This method performs the following steps:     <pre><code>1. Determines the task type (clustering, classification, or regression) based on the target column.\n2. Encodes the target column if it is categorical.\n3. Checks for class imbalance if `ci` is True.\n4. Splits the dataset into training and testing sets.\n5. Applies preprocessing to the features using the specified or default encoders.\n6. Stores the preprocessed training and testing datasets for model training.\n</code></pre></p> <p>Examples: <pre><code>dataset = Dataset(dataframe=df)\ndataset.fit(features=[\"feature1\", \"feature2\", \"feature_3\"], target='target_column', t= \"classification\", check_imbalance=True)\n\n# if with custom encoder\nencoder = {\"one_hot\":[\"feature_1\",\"feature_2\"], \"target_mean\": [\"feature_3\"]}\ndataset.fit(features=[\"feature1\", \"feature2\", \"feature_3\"], target='target_column', t= \"classification\", check_imbalance=True, encoder= encoder)\n</code></pre></p>"},{"location":"dataset/#optialgo.Dataset.flow_from_array","title":"flow_from_array","text":"<pre><code>flow_from_array(X: ndarray) -&gt; ndarray\n</code></pre> <p>Transforms the input array using the preprocessing pipeline.</p> <p>Parameters:</p> <ul> <li> <code>X</code>           \u2013            <p>The input array to be transformed. It should have the same number of features as the training data and in the same order.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>The transformed data as a NumPy array.</p> </li> </ul> <p>Examples: <pre><code>input_array = np.array([[1, 2, 3], [4, 5, 6]])\ntransformed_array = dataset.flow_from_array(input_array)\nprint(transformed_array.shape)\n# output : (2, 3)\n# Assuming the pipeline transforms it into 3 features\n</code></pre></p>"},{"location":"dataset/#optialgo.Dataset.flow_from_dataframe","title":"flow_from_dataframe","text":"<pre><code>flow_from_dataframe(X: DataFrame) -&gt; ndarray\n</code></pre> <p>Transforms the input dataframe using the preprocessing pipeline.</p> <p>Parameters:</p> <ul> <li> <code>X</code>               (<code>DataFrame</code>)           \u2013            <p>The input dataframe to be transformed.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>np.ndarray: The transformed data as a NumPy array.</p> </li> </ul> <p>Examples: <pre><code>new_data = pd.DataFrame({\"col_a\": [1,2,3],\"col_b\":[1,1,1], \"col_c\" : [2,2,2]})\ntransformed_X = dataset.flow_from_dataframe(new_data)\nprint(transformed_X.shape)\n# output : (3,3)\n</code></pre></p>"},{"location":"dataset/#optialgo.Dataset.get_label","title":"get_label","text":"<pre><code>get_label(y_pred: ndarray) -&gt; ndarray\n</code></pre> <p>Converts predicted numerical labels back to their original categorical labels using the label encoder.</p> <p>Parameters:</p> <ul> <li> <code>y_pred</code>               (<code>ndarray</code>)           \u2013            <p>The predicted numerical labels to be converted.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>The original categorical labels corresponding to the numerical predictions.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the label encoder has not been fitted or is not available.</p> </li> </ul> <p>Examples: <pre><code>y_pred = np.array([0, 1, 2])\noriginal_labels = dataset.get_label(y_pred)\nprint(original_labels)\n# output : array(['class1', 'class2', 'class3'], dtype=object)\n</code></pre></p>"},{"location":"dataset/#optialgo.Dataset.get_x_y","title":"get_x_y","text":"<pre><code>get_x_y()\n</code></pre> <p>Splits the preprocessed training and testing data into features and target arrays.</p> <p>Returns:</p> <ul> <li> <code>tuple</code>          \u2013            <p>A tuple containing four elements: X_train, X_test, y_train, y_test</p> </li> </ul> <p>Examples: <pre><code>X_train, X_test, y_train, y_test = dataset.get_x_y()\n</code></pre></p>"},{"location":"dataset/#optialgo.Dataset.save","title":"save","text":"<pre><code>save()\n</code></pre> <p>Serialize and save the dataset object using pickle.</p> <p>Returns:</p> <ul> <li> <code>bytes</code>          \u2013            <p>Serialized representation of the optialgo object.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>PickleError</code>             \u2013            <p>If serialization fails.</p> </li> </ul>"},{"location":"dataset/#properties","title":"Properties","text":""},{"location":"dataset/#optialgo.Dataset.ENCODERS","title":"ENCODERS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ENCODERS = {\n    \"target_mean\": TargetEncoder(),\n    \"one_hot\": OneHotEncoder(),\n    \"ordinal\": OrdinalEncoder(),\n}\n</code></pre>"},{"location":"dataset/#optialgo.Dataset.dataframe","title":"dataframe  <code>property</code>","text":"<pre><code>dataframe\n</code></pre>"},{"location":"dataset/#optialgo.Dataset.train","title":"train  <code>property</code>","text":"<pre><code>train: DataFrame\n</code></pre>"},{"location":"dataset/#optialgo.Dataset.test","title":"test  <code>property</code>","text":"<pre><code>test\n</code></pre>"},{"location":"dataset/#optialgo.Dataset.feature_names","title":"feature_names  <code>property</code>","text":"<pre><code>feature_names\n</code></pre>"},{"location":"dataset/#optialgo.Dataset.label_encoder","title":"label_encoder  <code>property</code>","text":"<pre><code>label_encoder\n</code></pre>"},{"location":"dataset/#optialgo.Dataset.pipeline","title":"pipeline  <code>property</code>","text":"<pre><code>pipeline\n</code></pre>"},{"location":"dataset/#optialgo.Dataset.target","title":"target  <code>property</code>","text":"<pre><code>target\n</code></pre>"},{"location":"text_dataset/","title":"Text dataset","text":""},{"location":"text_dataset/#optialgo.TextDataset","title":"TextDataset","text":"<pre><code>TextDataset(\n    dataframe: DataFrame,\n    test_size: float = 0.2,\n    seed: int = 42,\n)\n</code></pre> <p>A class to handle text data preprocessing and manipulation for machine learning tasks.</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>The input dataframe containing the dataset.</p> </li> <li> <code>test_size</code>               (<code>float</code>, default:                   <code>0.2</code> )           \u2013            <p>Proportion of the dataset to include in the test split (default is 0.2).</p> </li> <li> <code>seed</code>               (<code>int</code>, default:                   <code>42</code> )           \u2013            <p>Random seed for reproducibility (default is 42).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If there are missing values in the dataframe.</p> </li> </ul>"},{"location":"text_dataset/#optialgo.TextDataset.fit","title":"fit","text":"<pre><code>fit(\n    feature: str,\n    target: Optional[str],\n    t: Literal[\"classification\", \"regression\"],\n    vectorizer: Union[\n        Literal[\"tfidf\", \"count_vect\"], Tokenizer\n    ] = \"tfidf\",\n    ci: bool = False,\n)\n</code></pre> <p>Fits the preprocessing pipeline and prepares the data for training and testing.</p> <p>Parameters:</p> <ul> <li> <code>feature</code>               (<code>str</code>)           \u2013            <p>The feature column to use for training.</p> </li> <li> <code>target</code>           \u2013            <p>The target column to use for training.</p> </li> <li> <code>t</code>           \u2013            <p>The type of task (classification or regression).</p> </li> <li> <code>vectorizer</code>           \u2013            <p>The vectorizer to use for preprocessing (default is \"tfidf\").</p> </li> <li> <code>verbose</code>           \u2013            <p>Whether to print verbose output (default is False).</p> </li> <li> <code>ci</code>           \u2013            <p>Whether to check for class imbalance (default is False).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>TextDataset</code>          \u2013            <p>The fitted TextDataset object.</p> </li> </ul>"},{"location":"text_dataset/#optialgo.TextDataset.flow_from_array","title":"flow_from_array","text":"<pre><code>flow_from_array(X: ndarray) -&gt; ndarray\n</code></pre> <p>Transforms the given array using the preprocessing pipeline.</p> <p>Parameters:</p> <ul> <li> <code>X</code>           \u2013            <p>The input array to transform.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>The transformed array.</p> </li> </ul>"},{"location":"text_dataset/#optialgo.TextDataset.flow_from_dataframe","title":"flow_from_dataframe","text":"<pre><code>flow_from_dataframe(X: DataFrame) -&gt; ndarray\n</code></pre> <p>Transforms the feature column of the given dataframe using the preprocessing pipeline.</p> <p>Parameters:</p> <ul> <li> <code>X</code>           \u2013            <p>The input dataframe to transform.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>The transformed feature column.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>KeyError</code>             \u2013            <p>If the feature column is not in the dataframe.</p> </li> </ul>"},{"location":"text_dataset/#optialgo.TextDataset.get_label","title":"get_label","text":"<pre><code>get_label(y_pred: ndarray) -&gt; ndarray\n</code></pre> <p>Converts predicted labels back to their original form using the label encoder.</p> <p>Parameters:</p> <ul> <li> <code>y_pred</code>           \u2013            <p>The predicted labels.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>The original labels.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the label encoder is not found.</p> </li> </ul>"},{"location":"text_dataset/#optialgo.TextDataset.get_x_y","title":"get_x_y","text":"<pre><code>get_x_y() -&gt; tuple\n</code></pre> <p>Returns the train and test splits of features and labels.</p> <p>Returns:</p> <ul> <li> <code>tuple</code>           \u2013            <p>The training features, testing features, training labels, and testing labels.</p> </li> </ul>"},{"location":"text_dataset/#properties","title":"Properties","text":""},{"location":"text_dataset/#optialgo.TextDataset.dataframe","title":"dataframe  <code>property</code>","text":"<pre><code>dataframe\n</code></pre>"},{"location":"text_dataset/#optialgo.TextDataset.train","title":"train  <code>property</code>","text":"<pre><code>train\n</code></pre>"},{"location":"text_dataset/#optialgo.TextDataset.test","title":"test  <code>property</code>","text":"<pre><code>test\n</code></pre>"},{"location":"text_dataset/#optialgo.TextDataset.pipeline","title":"pipeline  <code>property</code>","text":"<pre><code>pipeline\n</code></pre>"},{"location":"text_dataset/#optialgo.TextDataset.feature","title":"feature  <code>property</code>","text":"<pre><code>feature\n</code></pre>"},{"location":"text_dataset/#optialgo.TextDataset.vectorizer","title":"vectorizer  <code>property</code>","text":"<pre><code>vectorizer\n</code></pre>"},{"location":"text_dataset/#optialgo.TextDataset.label_encoder","title":"label_encoder  <code>property</code>","text":"<pre><code>label_encoder\n</code></pre>"}]}